Suppose that a system initially has only a single thread (T1), which is  running the function f1(). f1() calls pthread_create to create a new thread, T2, to run function f2() concurrently with T1. These two threads and the functions they execute are illustrated in the two columns of the figure below. As illustrated in the figure, thread T1 calls function fb(), and thread T2 calls functions fa() and fc(). Your task is to synchronize the calls to fa(), fb(), and fc() so that the following synchronization rules are enforced:
(1)	function fa() finishes before function fb() is called, and
(2)	function fb() finishes before function fc() is called.
Show how to use semaphore(s) to enforce these sychronization rules by adding P() and V() calls in suitable places in functions f1() and f2() in the diagram below. You must also declare (at the top of the diagram) global variables to point to any semphores you use in your solution. Finally, you must include sem create calls in suitable places in f1() and/or f2() to create and initialize the semaphores you need. Be sure that your sem create() calls show the intial semaphore value for each newly created semaphore. Do not use any synchronization primitives or techniques other than sempahores. Keep your solution as simple as possible.
